#!/usr/bin/env wolframscript
(* ::Package:: *)

(* ::Input:: *)
(*a=RandomReal[];b=RandomReal[];*)
(*\[Kappa]1=RandomReal[];\[Kappa]2=RandomReal[];\[Kappa]3=1;*)
(*lapseadveccoeff=1;lapsecoeff=2;lapsepower=1;*)
(*shiftadveccoeff =1;shiftGammacoeff=0.75;\[Eta]=RandomReal[];*)
(*scalarmass=RandomReal[];*)
(**)
(*\[Alpha]GB=RandomReal[];cutoffGB=0;factorGB=1;*)
(*df=1;d2f=\[Pi];g2=RandomReal[];dg2dphi=\[Pi];*)
(**)
(*chi=RandomReal[];K=RandomReal[];*)
(*phi=RandomReal[];Kphi=RandomReal[];*)
(*Theta=RandomReal[];lapse=RandomReal[];*)
(*h=Table[Table[RandomReal[],{i,1,3}],{j,1,3}];*)
(*Do[Do[h[[i,j]]=h[[j,i]],{i,j+1,3}],{j,1,3}];*)
(*A=Table[Table[RandomReal[],{i,1,3}],{j,1,3}];*)
(*Do[Do[A[[i,j]]=A[[j,i]],{i,j+1,3}],{j,1,3}];*)
(*gamma=Table[RandomReal[],{i,1,3}];*)
(*shift=Table[RandomReal[],{i,1,3}];*)
(*B=Table[RandomReal[],{i,1,3}];*)
(**)
(*(*Set h to have determinant 1 *)*)
(*det = Det[h];*)
(*Do[Do[h[[i,j]]=Sign[det]*h[[i,j]]*Power[Abs[det],-1/3],{i,1,3}],{j,1,3}];*)
(**)
(*(*Set A to be traceless*)*)
(*hu=Inverse[h];*)
(*trA=Tr[hu . A];*)
(*Do[Do[A[[i,j]]=A[[i,j]]-1/3h[[i,j]]trA,{i,1,3}],{j,1,3}];*)
(**)
(*dchi=Table[RandomReal[],{i,1,3}];*)
(*dphi=Table[RandomReal[],{i,1,3}];*)
(*dKphi=Table[RandomReal[],{i,1,3}];*)
(*dTheta=Table[RandomReal[],{i,1,3}];*)
(*dlapse=Table[RandomReal[],{i,1,3}];*)
(*dK=Table[RandomReal[],{i,1,3}];*)
(*dh=Table[RandomReal[],{i,1,3},{j,1,3},{k,1,3}];*)
(*Do[Do[Do[dh[[k,i,j]]=dh[[k,j,i]],{i,j+1,3}],{j,1,3}],{k,1,3}];*)
(*dA=Table[RandomReal[],{i,1,3},{j,1,3},{k,1,3}];*)
(*Do[Do[Do[dA[[k,i,j]]=dA[[k,j,i]],{i,j+1,3}],{j,1,3}],{k,1,3}];*)
(*dgamma=Table[RandomReal[],{i,1,3},{j,1,3}];*)
(*dshift=Table[RandomReal[],{i,1,3},{j,1,3}];*)
(*dB=Table[RandomReal[],{i,1,3},{j,1,3}];*)
(**)
(*d2chi=Table[RandomReal[],{i,1,3},{j,1,3}];*)
(*d2phi=Table[RandomReal[],{i,1,3},{j,1,3}];*)
(*d2lapse=Table[RandomReal[],{i,1,3},{j,1,3}];*)
(*d2h=Table[RandomReal[],{i,1,3},{j,1,3},{k,1,3},{l,1,3}];*)
(*Do[Do[Do[d2h[[l,k,i,j]]=d2h[[l,k,j,i]],{i,j+1,3}],{j,1,3}],{k,1,3},{l,1,3}];*)
(*d2shift=Table[RandomReal[],{i,1,3},{j,1,3},{l,1,3}];*)
(**)
(*(*Make the derivatives symmetric*)*)
(*Do[d2chi[[i,j]]=d2chi[[j,i]],{i,1,3},{j,1,3}];*)
(*Do[d2phi[[i,j]]=d2phi[[j,i]],{i,1,3},{j,1,3}];*)
(*Do[d2lapse[[i,j]]=d2lapse[[j,i]],{i,1,3},{j,1,3}];*)
(*Do[d2h[[i,j,All,All]]=d2h[[j,i,All,All]],{i,1,3},{j,1,3}];*)
(*Do[d2shift[[i,j,All]]=d2shift[[j,i,All]],{i,1,3},{j,1,3}];*)
(**)
(*stream=OpenWrite[NotebookDirectory[]<>"values1.hpp"];*)
(*WriteLine[stream,"////Autogenerated by Mathematica"];*)
(*Close[stream];*)
(**)
(*stream=OpenAppend[NotebookDirectory[]<>"values1.hpp"];*)
(*WriteLine[stream,"vars.chi = "<>ToString[chi//InputForm]<>";"];*)
(*WriteLine[stream,"vars.phi = "<>ToString[phi//InputForm]<>";"];*)
(*WriteLine[stream,"vars.Pi = "<>ToString[-Kphi//InputForm]<>";"];*)
(*WriteLine[stream,"vars.Theta = "<>ToString[Theta//InputForm]<>";"];*)
(*WriteLine[stream,"vars.lapse = "<>ToString[lapse//InputForm]<>";"];*)
(*WriteLine[stream,"vars.K = "<>ToString[K//InputForm]<>";"];*)
(*Do[WriteLine[stream,"vars.h["<>ToString[i-1]<>"]["<>ToString[j-1]<>"] = "<>ToString[h[[i,j]]//InputForm]<>";"],{i,1,3},{j,1,3}];*)
(*Do[WriteLine[stream,"vars.A["<>ToString[i-1]<>"]["<>ToString[j-1]<>"] = "<>ToString[A[[i,j]]//InputForm]<>";"],{i,1,3},{j,1,3}];*)
(*Do[WriteLine[stream,"vars.Gamma["<>ToString[j-1]<>"] = "<>ToString[gamma[[j]]//InputForm]<>";"],{j,1,3}];*)
(*Do[WriteLine[stream,"vars.B["<>ToString[j-1]<>"] = "<>ToString[B[[j]]//InputForm]<>";"],{j,1,3}];*)
(*Do[WriteLine[stream,"vars.shift["<>ToString[j-1]<>"] = "<>ToString[shift[[j]]//InputForm]<>";"],{j,1,3}];*)
(*Do[WriteLine[stream,"d1.chi["<>ToString[j-1]<>"] = "<>ToString[dchi[[j]]//InputForm]<>";"],{j,1,3}];*)
(*Do[WriteLine[stream,"d1.phi["<>ToString[j-1]<>"] = "<>ToString[dphi[[j]]//InputForm]<>";"],{j,1,3}];*)
(*Do[WriteLine[stream,"d1.Pi["<>ToString[j-1]<>"] = "<>ToString[-dKphi[[j]]//InputForm]<>";"],{j,1,3}];*)
(*Do[WriteLine[stream,"d1.Theta["<>ToString[j-1]<>"] = "<>ToString[dTheta[[j]]//InputForm]<>";"],{j,1,3}];*)
(*Do[WriteLine[stream,"d1.K["<>ToString[j-1]<>"] = "<>ToString[dK[[j]]//InputForm]<>";"],{j,1,3}];*)
(*Do[WriteLine[stream,"d1.lapse["<>ToString[j-1]<>"] = "<>ToString[dlapse[[j]]//InputForm]<>";"],{j,1,3}];*)
(*Do[WriteLine[stream,"d1.h["<>ToString[i-1]<>"]["<>ToString[j-1]<>"]["<>ToString[k-1]<>"] = "<>ToString[dh[[k,i,j]]//InputForm]<>";"],{i,1,3},{j,1,3},{k,1,3}];*)
(*Do[WriteLine[stream,"d1.A["<>ToString[i-1]<>"]["<>ToString[j-1]<>"]["<>ToString[k-1]<>"] = "<>ToString[dA[[k,i,j]]//InputForm]<>";"],{i,1,3},{j,1,3},{k,1,3}];*)
(*Do[WriteLine[stream,"d1.Gamma["<>ToString[j-1]<>"]["<>ToString[k-1]<>"] = "<>ToString[dgamma[[k,j]]//InputForm]<>";"],{j,1,3},{k,1,3}];*)
(*Do[WriteLine[stream,"d1.shift["<>ToString[j-1]<>"]["<>ToString[k-1]<>"] = "<>ToString[dshift[[k,j]]//InputForm]<>";"],{j,1,3},{k,1,3}];*)
(*Do[WriteLine[stream,"d1.B["<>ToString[j-1]<>"]["<>ToString[k-1]<>"] = "<>ToString[dB[[k,j]]//InputForm]<>";"],{j,1,3},{k,1,3}];*)
(*Do[WriteLine[stream,"d2.chi["<>ToString[l-1]<>"]["<>ToString[j-1]<>"] = "<>ToString[d2chi[[l,j]]//InputForm]<>";"],{j,1,3},{l,1,3}];*)
(*Do[WriteLine[stream,"d2.phi["<>ToString[l-1]<>"]["<>ToString[j-1]<>"] = "<>ToString[d2phi[[l,j]]//InputForm]<>";"],{j,1,3},{l,1,3}];*)
(*Do[WriteLine[stream,"d2.lapse["<>ToString[l-1]<>"]["<>ToString[j-1]<>"] = "<>ToString[d2lapse[[l,j]]//InputForm]<>";"],{j,1,3},{l,1,3}];*)
(*Do[WriteLine[stream,"d2.h["<>ToString[i-1]<>"]["<>ToString[j-1]<>"]["<>ToString[l-1]<>"]["<>ToString[k-1]<>"] = "<>ToString[d2h[[l,k,i,j]]//InputForm]<>";"],{i,1,3},{j,1,3},{k,1,3},{l,1,3}];*)
(*Do[WriteLine[stream,"d2.shift["<>ToString[j-1]<>"]["<>ToString[l-1]<>"]["<>ToString[k-1]<>"] = "<>ToString[d2shift[[l,k,j]]//InputForm]<>";"],{j,1,3},{k,1,3},{l,1,3}];*)
(**)
(*WriteLine[stream,"m_modified_ccz4_params.kappa1 = "<>ToString[\[Kappa]1//InputForm]<>";"];*)
(*WriteLine[stream,"m_modified_ccz4_params.kappa2 = "<>ToString[\[Kappa]2//InputForm]<>";"];*)
(*WriteLine[stream,"m_modified_ccz4_params.kappa3 = "<>ToString[\[Kappa]3//InputForm]<>";"];*)
(*WriteLine[stream,"m_modified_ccz4_params.covariantZ4 = "<>ToString[0//InputForm]<>";"];*)
(**)
(*WriteLine[stream,"m_modified_ccz4_params.lapse_advec_coeff = "<>ToString[lapseadveccoeff//InputForm]<>";"];*)
(*WriteLine[stream,"m_modified_ccz4_params.lapse_coeff = "<>ToString[lapsecoeff//InputForm]<>";"];*)
(*WriteLine[stream,"m_modified_ccz4_params.lapse_power = "<>ToString[lapsepower//InputForm]<>";"];*)
(**)
(*WriteLine[stream,"m_modified_ccz4_params.shift_advec_coeff = "<>ToString[shiftadveccoeff//InputForm]<>";"];*)
(*WriteLine[stream,"m_modified_ccz4_params.shift_Gamma_coeff = "<>ToString[shiftGammacoeff//InputForm]<>";"];*)
(*WriteLine[stream,"m_modified_ccz4_params.eta = "<>ToString[\[Eta]//InputForm]<>";"];*)
(**)
(*WriteLine[stream,"m_modified_ccz4_params.a0 = "<>ToString[a//InputForm]<>";"];*)
(*WriteLine[stream,"m_modified_ccz4_params.b0 = "<>ToString[b//InputForm]<>";"];*)
(*WriteLine[stream,"m_coupling_and_potential_params.lambda_GB = "<>ToString[\[Alpha]GB/4//InputForm]<>";"];*)
(*WriteLine[stream,"m_coupling_and_potential_params.cutoff_GB = "<>ToString[cutoffGB//InputForm]<>";"];*)
(*WriteLine[stream,"m_coupling_and_potential_params.factor_GB = "<>ToString[factorGB//InputForm]<>";"];*)
(*WriteLine[stream,"m_coupling_and_potential_params.g2 = "<>ToString[g2//InputForm]<>";"];*)
(**)
(*WriteLine[stream,"m_coupling_and_potential_params.scalar_mass = "<>ToString[scalarmass//InputForm]<>";"];*)
(*Close[stream];*)
(*\[Kappa]1=\[Kappa]1*lapse;*)
(*\[Alpha]GB=\[Alpha]GB/(1+ Exp[-factorGB(chi-cutoffGB)]);*)
(**)
(*chris=1/2 hu . (Transpose[dh,{2,3,1}]+Transpose[dh,{3,2,1}]-dh);*)
(*chrisContr=TensorContract[Outer[Times,hu,chris],{{1,4},{2,5}}];*)
(**)
(*(*Calculate ricci*)*)
(*dims=4;\[Chi]=chi;d\[Chi]=dchi;d2\[Chi]=d2chi;hh=h;*)
(*dHh=dh;d2Hh=d2h;gam=gamma;dGam=dgamma;*)
(*zOverChi=1/2 (gam-chrisContr);*)
(*zz=zOverChi*chi;*)
(*ricChi=(dims-3)/(2 \[Chi]) (d2\[Chi]-d\[Chi] . chris)-(dims-3)/(4 \[Chi]^2) Outer[Times,d\[Chi],d\[Chi]]+hh (1/(2 \[Chi]) Tr[hu . d2\[Chi]]-(dims-1)/(4 \[Chi]^2) (hu . d\[Chi]) . d\[Chi])-1/(2 \[Chi]) hh chrisContr . d\[Chi];*)
(**)
(*(*RicBar calculated as in Alcubierre 2.8.17*)*)
(*ricBar=-(1/2) TensorContract[hu . d2Hh,{1,2}]+Symmetrize[dGam . hh+(hh . chris) . (gam-2*zz/chi)]+2*Symmetrize[TensorContract[Outer[Times,chris,(hh . chris) . hu],{{1,5},{2,6}}]]+TensorContract[Outer[Times,chris,(hh . chris) . hu],{{1,4},{3,6}}];*)
(*ricBarnoz=-(1/2) TensorContract[hu . d2Hh,{1,2}]+Symmetrize[dGam . hh+(hh . chris) . gam]+2*Symmetrize[TensorContract[Outer[Times,chris,(hh . chris) . hu],{{1,5},{2,6}}]]+TensorContract[Outer[Times,chris,(hh . chris) . hu],{{1,4},{3,6}}];*)
(*zterms=\[Chi]^-2 (2 Symmetrize[Outer[Times,zz . hh,d\[Chi]]]-hh zz . d\[Chi])+\[Chi]^-1 zz . dHh;*)
(*ricciZ=ricBar+ricChi+zterms;*)
(*ricci=ricBarnoz+ricChi;*)
(*ricciSZ=Tr[\[Chi] hu . ricciZ];*)
(*ricciS=Tr[\[Chi] hu . ricci];*)
(**)
(*(*define variables*)*)
(*Aa=A;\[Alpha]=lapse;d\[Alpha]=dlapse;d2\[Alpha]=d2lapse;*)
(*\[Beta]=shift;d\[Beta]=dshift;d2\[Beta]=d2shift;*)
(*Kk=K;\[CapitalTheta]=Theta;d\[CapitalTheta]=dTheta;*)
(*\[Phi]=phi;d\[Phi]=dphi;d2\[Phi]=d2phi;K\[Phi]=Kphi;dK\[Phi]=dKphi;*)
(*Vofphi=scalarmass^2/2 *\[Phi]^2;dVdphi=scalarmass^2*\[Phi];*)
(**)
(*(*useful computations*)*)
(*covd2lapse\[Chi]=\[Chi] (d2\[Alpha]-TensorContract[Outer[Times,chris,d\[Alpha]],{1,4}])+Symmetrize[TensorProduct[d\[Alpha],d\[Chi]]]-h/2 (hu . d\[Chi] . d\[Alpha]);*)
(*trcovd2lapse=Tr[\[Chi] hu . d2\[Alpha]]-\[Chi] chrisContr . d\[Alpha]+(1-3/2) hu . d\[Alpha] . d\[Chi];*)
(*trA2=TensorContract[Outer[Times,Aa . hu,hu . Aa],{{1,3},{2,4}}];*)
(*Mij=ricci+1/(3 \[Chi]) (2/3 Kk^2 hh+Kk Aa-3 TensorContract[Outer[Times,Aa,hu . Aa],{2,3}]);*)
(*M=Tr[\[Chi] hu . Mij];*)
(*Mtf=Mij-M/(3 \[Chi]) hh;*)
(*Ni=TensorContract[Outer[Times,hu,dA],{{1,3},{2,4}}]-Aa . chrisContr-TensorContract[Outer[Times,chris,Aa . hu],{{1,4},{2,5}}]-3/(2 \[Chi]) Aa . (hu . d\[Chi])-2/3 dK;*)
(*\[CapitalOmega]i=df (dK\[Phi]-Aa . (hu . d\[Phi])-Kk d\[Phi]/3)+d2f K\[Phi] d\[Phi];*)
(*\[CapitalOmega]ij=df (d2\[Phi]-TensorContract[Outer[Times,chris,d\[Phi]],{1,4}]+Symmetrize[TensorProduct[d\[Phi],d\[Chi]]]/\[Chi]-h/2 (hu . d\[Chi] . d\[Phi])/\[Chi]-K\[Phi]/\[Chi] (Aa+1/3 Kk hh))+d2f TensorProduct[d\[Phi],d\[Phi]];*)
(*\[CapitalOmega]=Tr[\[Chi] hu . \[CapitalOmega]ij];*)
(*\[CapitalOmega]tf=\[CapitalOmega]ij-\[CapitalOmega]/(3 \[Chi]) hh;*)
(**)
(*covdA\[Chi]=dA-Transpose[TensorContract[Outer[Times,chris,Aa],{1,4}]+TensorProduct[hh,Aa . (hu . d\[Chi])]/(2\[Chi])-TensorProduct[Aa,d\[Chi]]/(2\[Chi]),{1,3,2}]+TensorProduct[Aa,d\[Chi]]/(2\[Chi])-(TensorContract[Outer[Times,chris,Aa],{1,4}]+TensorProduct[hh,Aa . (hu . d\[Chi])]/(2\[Chi]));*)
(*covdA\[Chi]diff=covdA\[Chi]-Transpose[covdA\[Chi],{2,1,3}];*)
(**)
(*(*Calculate \[Rho]GB and JGB*)*)
(*\[Rho]GB=\[CapitalOmega] M/2-\[Chi]^2 TensorContract[Outer[Times,Mij . hu,hu . \[CapitalOmega]ij],{{1,3},{2,4}}];*)
(*JGB=\[CapitalOmega]i M/2-Mij . (\[Chi] hu . \[CapitalOmega]i)-\[CapitalOmega]ij . (\[Chi] hu . (Ni+dK/3))+\[CapitalOmega] (Ni+dK/3)+\[Chi] TensorContract[Outer[Times,hu . \[CapitalOmega]ij . hu,covdA\[Chi]diff],{{1,4},{2,5}}];*)
(**)
(*(*calculate S terms*)*)
(*L\[Beta]A=\[Beta] . dA+2 Symmetrize[TensorContract[Outer[Times,Aa,d\[Beta]],{1,4}]];*)
(*L\[Beta]hA=L\[Beta]A+2/3 (\[Alpha] Kk-Tr[d\[Beta]]) Aa;*)
(*H=-4/3 \[Chi] (hu . Ni) . dK-4/9 (\[Chi] hu . dK) . dK+2 \[Chi] TensorContract[Outer[Times,hu . covdA\[Chi] . hu,Transpose[Transpose[covdA\[Chi]diff,{1,3,2}] . hu,{1,3,2}]],{{1,4},{2,5},{3,6}}];*)
(**)
(*SK\[Phi]=-4 M/3 (-\[Beta] . dK+trcovd2lapse-\[Alpha] (trA2+Kk^2/3))-4 \[Alpha] H+8 \[Chi] TensorContract[Outer[Times,Mtf . hu,hu . (covd2lapse\[Chi]+\[Alpha] TensorContract[Outer[Times,Aa,hu . Aa],{2,3}]-L\[Beta]hA)],{{1,3},{2,4}}];*)
(*X=1/2(K\[Phi]^2-(\[Chi] hu . d\[Phi]) . d\[Phi]);*)
(*df2 = df * df/(1+2g2 X +2g2 K\[Phi]^2);*)
(*SK=1/3 (\[CapitalOmega]-\[Alpha]GB/4 df2 M^2) (-\[Beta] . dK+trcovd2lapse-\[Alpha] (trA2+Kk^2/3))+\[Alpha] M (d2f/4 (K\[Phi]^2-\[Chi] hu . d\[Phi] . d\[Phi])-\[Alpha]GB/4 df2 H+\[CapitalOmega]/3)-\[Alpha] \[Chi] (hu . \[CapitalOmega]i . Ni+\[Chi]/2 TensorContract[Outer[Times,\[CapitalOmega]tf . hu,hu . Mtf],{{1,3},{2,4}}])+\[Chi]/2 TensorContract[Outer[Times,(\[CapitalOmega]tf-\[Alpha]GB df2 M Mtf) . hu,hu . L\[Beta]hA],{{1,3},{2,4}}]-\[Chi]/2 TensorContract[Outer[Times,(\[CapitalOmega]tf-\[Alpha]GB df2 M Mtf) . hu,hu . (covd2lapse\[Chi]+\[Alpha] TensorContract[Outer[Times,Aa,hu . Aa],{2,3}])],{{1,3},{2,4}}]-2 \[Alpha] \[Rho]GB;*)
(*Sij = 1/3 (\[CapitalOmega]tf-\[Alpha]GB df2 M Mtf) (-\[Beta] . dK+trcovd2lapse-\[Alpha] (trA2+Kk^2/3))+\[Alpha] Mtf (\[CapitalOmega]+d2f (K\[Phi]^2-\[Chi] hu . d\[Phi] . d\[Phi])-\[Alpha]GB df2 H)+\[CapitalOmega]/(3 \[Chi]) (covd2lapse\[Chi]+\[Alpha] TensorContract[Outer[Times,Aa,hu . Aa],{2,3}]-L\[Beta]hA)-\[CapitalOmega]/(9 \[Chi]) hh (trcovd2lapse+\[Alpha] trA2-Tr[hu . L\[Beta]A])-2 Symmetrize[TensorContract[Outer[Times,\[CapitalOmega]tf . hu,covd2lapse\[Chi]+\[Alpha] TensorContract[Outer[Times,Aa,hu . Aa],{2,3}]-L\[Beta]hA],{2,3}]]+2/3 \[CapitalOmega]tf (trcovd2lapse-\[Alpha] trA2)+2 TensorContract[Outer[Times,TensorProduct[h/3,hu . \[CapitalOmega]tf . hu]+\[Chi] \[Alpha]GB df2 TensorProduct[Mtf,hu . Mtf . hu],covd2lapse\[Chi]+\[Alpha] TensorContract[Outer[Times,Aa,hu . Aa],{2,3}]-L\[Beta]hA],{{3,5},{4,6}}]+\[Alpha] (2 (Transpose[covdA\[Chi],{3,2,1}] . (hu . \[CapitalOmega]i)-Symmetrize[covdA\[Chi] . (hu . \[CapitalOmega]i)])+2 hh/3 (2 Ni+dK) . (hu . \[CapitalOmega]i)-2 Symmetrize[TensorProduct[\[CapitalOmega]i,Ni+dK/3]]);*)
(**)
(*(*advec*)*)
(*stream=OpenAppend[NotebookDirectory[]<>"values1.hpp"];*)
(*WriteLine[stream,"advec.lapse = "<>ToString[\[Beta] . d\[Alpha]//InputForm]<>";"];*)
(*WriteLine[stream,"advec.chi = "<>ToString[\[Beta] . d\[Chi]//InputForm]<>";"];*)
(*WriteLine[stream,"advec.phi = "<>ToString[\[Beta] . d\[Phi]//InputForm]<>";"];*)
(*WriteLine[stream,"advec.Pi = "<>ToString[-\[Beta] . dK\[Phi]//InputForm]<>";"];*)
(*WriteLine[stream,"advec.Theta = "<>ToString[\[Beta] . d\[CapitalTheta]//InputForm]<>";"];*)
(*WriteLine[stream,"advec.lapse = "<>ToString[\[Beta] . d\[Alpha]//InputForm]<>";"];*)
(*WriteLine[stream,"advec.K = "<>ToString[\[Beta] . dK//InputForm]<>";"];*)
(*Do[WriteLine[stream,"advec.h["<>ToString[i-1]<>"]["<>ToString[j-1]<>"] = "<>ToString[(\[Beta] . dHh)[[i,j]]//InputForm]<>";"],{i,1,3},{j,1,3}];*)
(*Do[WriteLine[stream,"advec.A["<>ToString[i-1]<>"]["<>ToString[j-1]<>"] = "<>ToString[(\[Beta] . dA)[[i,j]]//InputForm]<>";"],{i,1,3},{j,1,3}];*)
(*Do[WriteLine[stream,"advec.Gamma["<>ToString[j-1]<>"] = "<>ToString[(\[Beta] . dGam)[[j]]//InputForm]<>";"],{j,1,3}];*)
(*Do[WriteLine[stream,"advec.shift["<>ToString[j-1]<>"] = "<>ToString[(\[Beta] . d\[Beta])[[j]]//InputForm]<>";"],{j,1,3}];*)
(*Do[WriteLine[stream,"advec.B["<>ToString[j-1]<>"] = "<>ToString[(\[Beta] . dB)[[j]]//InputForm]<>";"],{j,1,3}];*)
(*Close[stream];*)
(**)
(*covd2phi\[Chi]=\[Chi] (d2\[Phi]-TensorContract[Outer[Times,chris,d\[Phi]],{1,4}])+Symmetrize[TensorProduct[d\[Phi],d\[Chi]]]-h/2 (hu . d\[Chi] . d\[Phi]);*)
(*quadratic = -dVdphi+(Kk K\[Phi]-Tr[\[Chi] hu . d2\[Phi]]+\[Chi] chrisContr . d\[Phi]-(1-3/2) hu . d\[Phi] . d\[Chi])(2g2 K\[Phi]^2)+4g2 K\[Phi] \[Chi] hu . d\[Phi] . dK\[Phi]-3dg2dphi X^2-2/3 g2 Kk K\[Phi] (\[Chi] hu . d\[Phi]) . d\[Phi]-2\[Chi] g2 ((covd2phi\[Chi]+K\[Phi] Aa) . (hu . d\[Phi])) . (hu . d\[Phi]);Sij = Sij+\[Alpha] Mtf df/(1+2g2 X + 2g2 K\[Phi]^2) quadratic;*)
(*SK = SK+\[Alpha] M/4 df /(1+2g2 X + 2g2 K\[Phi]^2) quadratic;*)
(**)
(*(*calculate RHS of equations*)*)
(*(**Block GB back-reaction in Gravity  sector**)*)
(*Block[{\[Alpha]GB=0,Vofphi=0,X=0,K\[Phi]=0,d\[Phi]=d\[Phi]*0},*)
(*d\[Alpha]dt=lapseadveccoeff \[Beta] . d\[Alpha]-lapsecoeff Power[\[Alpha],lapsepower]*(Kk-2 \[CapitalTheta])/(1+a);*)
(*d\[Beta]dt=shiftadveccoeff \[Beta] . d\[Beta]+shiftGammacoeff  gam/(1+a)-a \[Alpha] \[Chi] (hu . d\[Alpha])/(1+a)-\[Eta] \[Beta];*)
(*dhdt=-2 \[Alpha] Aa-2/3 hh Tr[d\[Beta]]+\[Beta] . dHh+2 Symmetrize[TensorContract[Outer[Times,h,d\[Beta]],{1,4}]];*)
(*d\[Chi]dt=2 \[Chi]/3 (\[Alpha]*Kk-Tr[d\[Beta]])+\[Beta] . d\[Chi];*)
(*d\[CapitalTheta]dt=\[Alpha] ((ricciSZ-b/(1+b) ricciS)/2+Kk^2/(3 (1+b))-trA2/(2 (1+b))-Kk \[CapitalTheta])- zz . d\[Alpha]-\[Kappa]1 (2+\[Kappa]2) \[CapitalTheta]/(1+b)-\[Alpha] (2*(Vofphi-g2 X (X-2 K\[Phi]^2))+K\[Phi]^2+(\[Chi] hu . d\[Phi]) . d\[Phi])/(4 (1+b))-\[Alpha] \[Alpha]GB \[Rho]GB/(1+b)+\[Beta] . d\[CapitalTheta];*)
(*d\[CapitalGamma]dt=2 \[Alpha] TensorContract[Outer[Times,chris,hu . Aa . hu],{{2,4},{3,5}}]-\[Alpha] (3+2 b/(1+b)) (hu . Aa . hu) . d\[Chi]/\[Chi]-4 \[Alpha]/(3 (1+b)) hu . dK+2 hu . (\[Alpha] d\[CapitalTheta]/(1+b)-\[CapitalTheta] d\[Alpha])-2 \[Alpha] (2+b)/(3 (1+b)) K zOverChi-2 (hu . Aa . hu) . d\[Alpha]+2 \[Alpha] b/(1+b) (\[Chi]^-1 hu . (Aa . zz)+(1+3/2) (hu . Aa . hu) . d\[Chi]/\[Chi]-hu . TensorContract[Outer[Times,hu,dA],{{1,3},{2,5}}]+hu . TensorContract[Outer[Times,chris,Aa . hu],{{1,4},{2,5}}]+hu . (Aa . chrisContr))+4/3 Tr[d\[Beta]] zOverChi+1/3 hu . TensorContract[Outer[Times,IdentityMatrix[3],d2\[Beta]],{{1,4},{2,5}}]+2/3 chrisContr Tr[d\[Beta]]+TensorContract[Outer[Times,hu,d2\[Beta]],{{1,3},{2,4}}]-2 \[Kappa]1 zOverChi/(1+b)-2 \[Alpha] \[Alpha]GB/(1+b) hu . JGB-\[Alpha] K\[Phi]/(1+b) hu . d\[Phi] (1+2 g2 X)+\[Beta] . dGam-gam . d\[Beta];*)
(*dBdt =0*( shiftadveccoeff \[Beta] . (dB - dGam) +d\[CapitalGamma]dt-\[Eta] B);*)
(*dAdt=\[Alpha] (Aa (Kk-2 \[CapitalTheta])-2*TensorContract[Outer[Times,Aa,hu . Aa],{2,3}])-2/3 Aa Tr[d\[Beta]]+\[Alpha] \[Chi] (ricciZ-TensorProduct[d\[Phi],d\[Phi]]/2 (1+2 g2 X))-covd2lapse\[Chi]-\[Alpha] hh/3 (ricciSZ-(\[Chi] hu . d\[Phi]) . d\[Phi]/2 (1+2 g2 X))+hh/3 trcovd2lapse+L\[Beta]A+\[Chi] \[Alpha]GB Sij;*)
(*dKdt=-trcovd2lapse+\[Alpha] (ricciSZ-3 b/(4 (1+b)) ricciS-2 \[CapitalTheta] Kk)+\[Alpha]/(1+b) (3 b/4 TensorContract[Outer[Times,Aa . hu,hu . Aa],{{1,3},{2,4}}]+Kk^2 (1+b/2))-3 \[Kappa]1 \[CapitalTheta]/(2 (1+b)) (2+\[Kappa]2 (2+b))+3 \[Alpha] b K\[Phi]^2/(8 (1+b))-\[Alpha] (\[Chi] hu . d\[Phi]) . d\[Phi]/(2 (1+b)) (1+b/4)-3\[Alpha]/4Vofphi(1+1/(1+b))+\[Beta] . dK+\[Alpha]GB (SK+3 \[Alpha] b \[Rho]GB/(2 (1+b)))+\[Alpha]/4 g2 X (2(\[Chi] hu . d\[Phi]) . d\[Phi]+3X)-3 \[Alpha]/(4(1+b))g2 X(-X+2K\[Phi]^2)];*)
(**)
(*d\[Phi]dt=-\[Alpha] K\[Phi]+\[Beta] . d\[Phi];*)
(*dK\[Phi]dt=\[Alpha] (Kk K\[Phi]-Tr[\[Chi] hu . d2\[Phi]]+\[Chi] chrisContr . d\[Phi]-(1-3/2) hu . d\[Phi] . d\[Chi])(1+2g2 X)-\[Chi] hu . d\[Alpha] . d\[Phi](1+2g2 X + 2g2 K\[Phi]^2)+\[Beta] . dK\[Phi] (1+2g2 X+2g2 K\[Phi]^2)+\[Alpha]*dVdphi-\[Alpha]GB df SK\[Phi]/4-\[Alpha] 4g2 K\[Phi] \[Chi] hu . d\[Phi] . dK\[Phi]+3\[Alpha] dg2dphi X^2+2/3 \[Alpha] g2 Kk K\[Phi] (\[Chi] hu . d\[Phi]) . d\[Phi]+2\[Alpha] \[Chi] g2 ((covd2phi\[Chi]+K\[Phi] Aa) . (hu . d\[Phi])) . (hu . d\[Phi]);*)
(**)
(*df2 =df * df/(1+2g2 X + 2g2 K\[Phi]^2);*)
(*(*elements of the matrix+*)*)
(*Block[{\[Alpha]GB=0},*)
(*Xijkl=Transpose[TensorProduct[IdentityMatrix[3],IdentityMatrix[3]],{1,3,2,4}] (1-\[Alpha]GB/3 \[CapitalOmega])+2 \[Chi] \[Alpha]GB (Transpose[TensorProduct[IdentityMatrix[3],\[CapitalOmega]tf . hu],{1,3,2,4}]/2+Transpose[TensorProduct[IdentityMatrix[3],\[CapitalOmega]tf . hu],{3,2,1,4}]/2-TensorProduct[hh,hu . \[CapitalOmega]tf . hu]/3-\[Alpha]GB \[Chi] df2 TensorProduct[Mtf,hu . Mtf . hu]);*)
(*XK=\[Chi] \[Alpha]GB/2 hu . (\[CapitalOmega]tf-\[Alpha]GB df2 M Mtf) . hu];*)
(**)
(*XK\[Phi]=\[Chi] \[Alpha]GB/2 hu . Mtf . hu df;*)
(*Block[{\[Alpha]GB=0},*)
(*Yij=\[Chi] \[Alpha]GB/3 (-\[CapitalOmega]tf+\[Alpha]GB df2 M Mtf); *)
(*YK=1+\[Alpha]GB/3 (-\[CapitalOmega]+\[Alpha]GB/4 df2 M^2)];*)
(*YK\[Phi]=-\[Alpha]GB/12 df M; *)
(*mat=ArrayFlatten[{{ArrayReshape[Xijkl,{9,9}],{Flatten[Yij]}\[Transpose],0},{{Flatten[XK]},YK,0},{{Flatten[XK\[Phi]]},YK\[Phi],1+2g2 X +2g2 K\[Phi]^2}}];*)
(**)
(*vec=Flatten[{Flatten[dAdt],dKdt,dK\[Phi]dt}];*)
(*sol=Inverse[mat] . vec;*)
(*dAdt=ArrayReshape[sol,{3,3}];*)
(*dKdt=sol[[10]];*)
(*dK\[Phi]dt=sol[[11]];*)
(**)
(*stream=OpenAppend[NotebookDirectory[]<>"values1.hpp"];*)
(*WriteLine[stream,"double dlapsedt_known = "<>ToString[d\[Alpha]dt//InputForm]<>";"];*)
(*WriteLine[stream,"double dshiftdt_known[3] = "<>ToString[d\[Beta]dt//InputForm]<>";"];*)
(*WriteLine[stream,"double dBdt_known[3] = "<>ToString[dBdt//InputForm]<>";"];*)
(*WriteLine[stream,"double dhdt_known[3][3] = "<>ToString[dhdt//InputForm]<>";"];*)
(*WriteLine[stream,"double dchidt_known = "<>ToString[d\[Chi]dt//InputForm]<>";"];*)
(*WriteLine[stream,"double dphidt_known = "<>ToString[d\[Phi]dt//InputForm]<>";"];*)
(*WriteLine[stream,"double dThetadt_known = "<>ToString[d\[CapitalTheta]dt//InputForm]<>";"];*)
(*WriteLine[stream,"double dGammadt_known[3] = "<>ToString[d\[CapitalGamma]dt//InputForm]<>";"];*)
(*WriteLine[stream,"double dAdt_known[3][3] = "<>ToString[dAdt//InputForm]<>";"];*)
(*WriteLine[stream,"double dKdt_known = "<>ToString[dKdt//InputForm]<>";"];*)
(*WriteLine[stream,"double dPidt_known = "<>ToString[-dK\[Phi]dt//InputForm]<>";"];*)
(*Close[stream];*)
